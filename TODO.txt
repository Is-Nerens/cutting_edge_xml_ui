Maybe I should worry about click handling after I have solved the layout problem:
(1) text rendering, positioning and wrapping
(3) border radius
(2) image rendering, placement styling (repeat, stretch, keep aspect, center etc)
(3) overflow scroll (both axes) and overflow hidden
(4) window and subwindow management + close behaviour
(5) have a look at all the existing systems and codebase and refector + test to reduce complexity and 
improve maintainability and performance


Then I can move onto a unified UI event system

Then I can cuild a simple example app using the system

Next, I will work on a clever ground-breaking solution to handle styling

Then, I will work on dynamic tree manipulation and XML components + import tags

Then I will add: <tab> <dropdown> <grid> <table> <heirarchy> nodes

Then I will work on <canvas> and canvas drawing

Then I will work on relative positioning for elements

Then I will work on a real application














Nodus needs text rendering, property text parsing
nodes need a reference to their contained text
text needs a reference to their nodes so that ->
	I can loop over all the text and update the size of each node?

need resize observing and a window popup/nested window mechanism with closing
need to calculate ui element sizes and positions (with text size measuring and positioning)
need to render ui elements

need to handle overflow scroll hidden, enforce winow min size
need to handle text wrapping
need to handle mouse hover detetion -> with events
need to implement XML components
need to implement styling and element id system
need to implement element creation and deletion + bulk add & bulk delete for speed

build a simple app using these systems.

add a canvas node type where users can draw (SDL draw functionality?)

re-implement candlestick chart
add line chart
add that other one

start developing either a scripting system or ship with a sandboxed c compiler for users to write
trading algorithms. 

develop networking system to handle JSON communication with exchanges

start developing different UI layout prototypes to find a suitable one

start developing a simple usable app for writing and backtesting trading bots live.
Polish the app into a commercial product.
setup linux server side stuff to host user's bots.
do user tests and consult a cyber security specialist to work on making the app very secure
release the program